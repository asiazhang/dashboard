import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

interface TestImage {
  id: bigint;
  imageName: string;
  user: string;
  count: bigint;
}

interface TestImageApiResponse {
  images: TestImage[];
  total: number;
  pageSize: number;
  current: number;
}

// Define a service using a base URL and expected endpoints
export const testImagesApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: 'https://dummyjson.com/quotes' }),
  reducerPath: 'testImageApi',
  tagTypes: ['testImages'],
  endpoints: (build) => ({
    getTestImages: build.query<TestImageApiResponse, { limit?: number; page?: number }>({
      query: ({ limit = 20, page = 1 }) => `?limit=${limit}&page=${page}`,
      providesTags: (result, error, { limit, page }) =>
        result ? [{ type: 'testImages', id: `PAGE_${page}_LIMIT_${limit}` }] : [],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetTestImagesQuery } = testImagesApiSlice;
